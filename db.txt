-- Crear la base de datos
CREATE DATABASE Herramientas;
GO

-- Usar la base de datos
USE Herramientas;
GO

-- Tabla: Clientes
CREATE TABLE Clientes (
    ClienteID INT PRIMARY KEY IDENTITY,
    Nombre NVARCHAR(50),
    Apellido NVARCHAR(50),
    Telefono NVARCHAR(20),
    TipoMembresia NVARCHAR(20) -- Básico, VIP, Premium
);

-- Tabla: Instructores
CREATE TABLE Instructores (
    InstructorID INT PRIMARY KEY IDENTITY,
    Nombre NVARCHAR(50),
    Especialidad NVARCHAR(50),
    Disponibilidad BIT -- 1 = disponible, 0 = no disponible
);

-- Tabla: Clases
CREATE TABLE Clases (
    ClaseID INT PRIMARY KEY IDENTITY,
    NombreClase NVARCHAR(50),
    TipoClase NVARCHAR(50),
    Horario DATETIME,
    CupoMaximo INT
);

-- Tabla: Reservas
CREATE TABLE Reservas (
    ReservaID INT PRIMARY KEY IDENTITY,
    ClienteID INT FOREIGN KEY REFERENCES Clientes(ClienteID),
    ClaseID INT FOREIGN KEY REFERENCES Clases(ClaseID),
    FechaReserva DATETIME,
    Estado NVARCHAR(20) -- Activa, Cancelada
);

-- Tabla: Asistencias
CREATE TABLE Asistencias (
    AsistenciaID INT PRIMARY KEY IDENTITY,
    ClienteID INT FOREIGN KEY REFERENCES Clientes(ClienteID),
    ClaseID INT FOREIGN KEY REFERENCES Clases(ClaseID),
    FechaAsistencia DATETIME
);

-- 1. Registrar Reserva (verifica cupo)
CREATE PROCEDURE SP_RegistrarReserva
    @ClienteID INT,
    @ClaseID INT
AS
BEGIN
    DECLARE @CupoMaximo INT;
    DECLARE @Reservados INT;

    SELECT @CupoMaximo = CupoMaximo FROM Clases WHERE ClaseID = @ClaseID;
    SELECT @Reservados = COUNT(*) FROM Reservas WHERE ClaseID = @ClaseID AND Estado = 'Activa';

    IF @Reservados < @CupoMaximo
    BEGIN
        INSERT INTO Reservas (ClienteID, ClaseID, FechaReserva, Estado)
        VALUES (@ClienteID, @ClaseID, GETDATE(), 'Activa');
    END
    ELSE
    BEGIN
        RAISERROR('Clase llena', 16, 1);
    END
END;
GO

-- 2. Cancelar Reserva (solo si faltan +24h)
CREATE PROCEDURE SP_CancelarReserva
    @ReservaID INT
AS
BEGIN
    DECLARE @FechaReserva DATETIME;

    SELECT @FechaReserva = FechaReserva FROM Reservas WHERE ReservaID = @ReservaID;

    IF DATEDIFF(HOUR, GETDATE(), @FechaReserva) >= 24
    BEGIN
        UPDATE Reservas SET Estado = 'Cancelada' WHERE ReservaID = @ReservaID;
    END
    ELSE
    BEGIN
        RAISERROR('Solo se puede cancelar con al menos 24 horas de anticipación.', 16, 1);
    END
END;
GO

-- 3. Asignar Instructor (verifica disponibilidad)
CREATE PROCEDURE SP_AsignarInstructor
    @ClaseID INT,
    @InstructorID INT
AS
BEGIN
    DECLARE @Disponible BIT;

    SELECT @Disponible = Disponibilidad FROM Instructores WHERE InstructorID = @InstructorID;

    IF @Disponible = 1
    BEGIN
        UPDATE Clases SET InstructorID = @InstructorID WHERE ClaseID = @ClaseID;
        UPDATE Instructores SET Disponibilidad = 0 WHERE InstructorID = @InstructorID;
    END
    ELSE
    BEGIN
        RAISERROR('Instructor no disponible.', 16, 1);
    END
END;
GO
